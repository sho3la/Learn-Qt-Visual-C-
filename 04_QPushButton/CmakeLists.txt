cmake_minimum_required(VERSION 3.9)

project ("04_QPushButton")

# list the header files
set(HEADER_FILES

)

# list the source files
set(SOURCE_FILES
	main.cpp
)


# link with qt5
find_package(Qt5 COMPONENTS Core Gui Widgets REQUIRED)
qt5_wrap_cpp(HEADER_MOC ${HEADER_FILES})

# add library target
add_executable(04_QPushButton
	${HEADER_FILES}
	${SOURCE_FILES}
	${HEADER_MOC}
	${RCC_SOURCES}
)

set(QT_LIBS
	Qt5::Core
	Qt5::Gui
	Qt5::Widgets
)

target_link_libraries(04_QPushButton
	PUBLIC
		${QT_LIBS}
)


if("${CMAKE_SIZEOF_VOID_P}" EQUAL "8")

add_custom_command(
    TARGET 04_QPushButton POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:Qt5::Widgets>
		$<TARGET_FILE:Qt5::Core>
		$<TARGET_FILE:Qt5::Gui>
        $<TARGET_FILE_DIR:04_QPushButton>
)
else("${CMAKE_SIZEOF_VOID_P}" EQUAL "4")
add_custom_command(
    TARGET 04_QPushButton POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        $<TARGET_FILE:Qt5::Widgets>
		$<TARGET_FILE:Qt5::Core>
		$<TARGET_FILE:Qt5::Gui>
        $<TARGET_FILE_DIR:04_QPushButton>
)
ENDIF()


# Windows specfic flags to enable W variations of winapi
if(WIN32)
	target_compile_definitions(04_QPushButton
		PRIVATE
			OS_WINDOWS=1
	)
	target_compile_options(04_QPushButton
		PRIVATE
			/WX
	)
endif()

# enable C++17
# disable any compiler specifc extensions
target_compile_features(04_QPushButton PUBLIC cxx_std_17)
set_target_properties(04_QPushButton PROPERTIES
	CXX_EXTENSIONS OFF
)
